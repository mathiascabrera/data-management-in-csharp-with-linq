----------    Welcome to the course    ----------

We will analyze each of the operators and clauses that LINQ has for manipulating collections.

LINQ is one of the most important libraries in .NET.

LINQ makes it easy to manipulate data in different collections by minimizing the amount of code to perform a data transformation, filter the data in a collection, or compare the information contained in two collections.

With LINQ we can develop better code and follow the best practices that exist in .NET.

LINQ is essential for making Queries and developing Back End with Entity Framework.

Entity Framework allows us through classes to connect to a Database and manipulate Collections.

With LINQ we can easily perform queries and transformations on the data that will ultimately affect the database.

LINQ is also compatible with other programming languages.









----------    Pre requirements    ----------

- Knowledge in c#
- Knowledge in .NET
- .NET SDK 6 or higher.
- Visual Studio Code









----------    What´s LINQ?    ----------

Surge en el 2007.

Language-Integrated Query (LINQ). It is a language that is integrated into C# and that allows us to make queries about collections.

LINQ has two ways to be implemented: "Query Expression" and "Extension Methods".

The "Extension Method" is the standard of LINQ usage until now. They are methods that appear within a collection and that allow us to perform filters and different transformations.

"Query Expression" allows us to write queries very similar to SQL queries but using C# syntax.

The namespace to use is "System.Linq". This namespace comes by default in the latest versions of .NET, for example 5 and 6.


.NET Framework is the legacy version of .NET.




 What´s not LINQ?
 
- It is not a programming language. It is only based on a programming language and extends the syntax of C#.

- Not a SQL component.

- It is not a database component. It just brings in a collection from a database and reads or transforms it. We don't need to connect to a database to use LINQ, we simply need a collection of data.

- It is not a third-party bookstore. LINQ, as it belongs to .NET, is also OpenSource.

LINQ is built into .NET. Therefore, LINQ supports all .NET-compatible languages, such as C#, Visual Basic, F#, Visual C++, etc.


LINQ example:

First way (Query Expression):
var unTomate = from t in ArraydeStrings
				where t == "Tomate"
					select t;

Second way (Extension Method):					
var unTomate = ArraydeStrings.Where(t=> t == "Tomate");


Other sources:
https://www.syncfusion.com/succinctly-free-ebooks/linq
https://learn.microsoft.com/en-us/dotnet/csharp/linq/
https://linqexamples.com/intro/
https://dotnettutorials.net/lesson/introduction-to-linq/









----------    Declarative programming vs. imperative    ----------

They are two widely used programming styles.

Modern frameworks and libraries are based on declarative programming to minimize lines of code.

LINQ supports declarative programming. This simplifies our code for handling collections.


COMPARISON

Declarative programming:
- Programming paradigm.
- Instructions where I specify what I want and not how I want it. We do not specify each step.
- Contraposition to imperative programming.
- Reliable and simple.


Imperative programming:
- Programming paradigm.
- Step-by-step instruction sequence.
- Contraposition to declarative programming.
- More extensive but easy to interpret code.

Both are programming paradigms, they are programming styles adopted by different libraries and frameworks.
They help the programmer when programming and specifying the programming style that should be followed to have best practices.

Declarative programming guides us through instructions.
We must specify what we want to do and not how we want it. It basically gives us the mechanisms through functions that are already established, so that we can define what we want to do. This could be creating an API, reading a database record, filtering a collection, or performing a query, among other actions, using a keyword, configuration file, or function. We are not going to specify each step in the code.

In imperative programming we do have to specify step by step the entire series of instructions that we want to execute to achieve a certain purpose.

Imperative programming is the classic way of programming in C#.


Other source :
https://learn.microsoft.com/es-es/dotnet/standard/linq/functional-vs-imperative-programming
